#!/usr/bin/python

# Original Author:
#   Michele Campeotto <micampe@micampe.it>
#   (C) 2004 Michele Campeotto.
# Yahoo! authorization code by:
#    Cameron Mallory <cmallory@berserk.org>
# Glue and debugging:
#   Eric Weigle <weigle@gmail.com>
#
# Rewritten to use Conduit (http://www.conduit-project.org)
#   John Stowers <john.stowers@gmail.com>
#
# License: GNU GPL version 2.

import gtk, gobject
import sys, os, time
import urllib, urlparse

import dbus
if getattr(dbus, 'version', (0,0,0)) >= (0,41,0):
  import dbus.glib

WIDTH = 250
HEIGHT = 150
DEBUG = False
DEFAULT_ALPHA = 25

PICASA_CONFIG = """<configuration><username type='string'>usr</username><album type='string'>alb</album><password type='string'>pw</password></configuration>"""
FLICKR_CONFIG = """<configuration><username type='string'>usr</username><showPublic type='bool'>True</showPublic><tagWith type='string'>tag</tagWith></configuration>"""

SINKS = {
    "FlickrSink":
        {
        "options"   :   ["Username","Password"],
        "config"    :   FLICKR_CONFIG
        },
    "PicasaSink":
        {
        "options"   :   ["Username","Password", "Album"],
        "config"    :   PICASA_CONFIG
        }
}

class Sink:
    def __init__(self, classname, **configs):
        self.classname = classname
        self.configs = configs

    def set_default_config(self, default):
        self.defaultConfig = default

    def set_config(self, config):
        pass

class Yaput:
    def __init__(self):
        self.files = []

        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.set_title("Yaput")
        self.window.connect("delete_event", self._on_window_closed)
        self.window.set_border_width(10)
        self.window.set_resizable(False)

        self.white = gtk.gdk.Pixbuf(gtk.gdk.COLORSPACE_RGB, False, 8, WIDTH, HEIGHT)
        try:
            self.white.fill(0xffffffffL)
        except OverflowError:
            self.white.fill(0) # looks like crap, but at least doesn't crash

        self.vbox = gtk.VBox(False)
        self.vbox.set_spacing(10)

        #build the UI
        for classname in SINKS:
            #make a frame with the sinks logo in it
            frame = gtk.Frame()
            frame.set_shadow_type(gtk.SHADOW_IN)
            frame.set_size_request(WIDTH, HEIGHT)
            image = gtk.Image()
            image.set_from_pixbuf(self.white)
            frame.add(image)
            self.vbox.pack_start(frame, True, True)

            #add the config variables below
            config = gtk.Expander("Configuration")
            config.set_expanded(False)
            vbox = gtk.VBox(False)
            vbox.set_spacing(5)

            config.add(vbox)
            self.vbox.pack_start(config, True, True)
            for o in SINKS[classname]["options"]:
                hbox = gtk.HBox(False, 5)
                hbox.pack_start(gtk.Label("%s: " % o), False, False)
                entry = gtk.Entry()
                entry.connect("changed", self._on_entry_changed, classname, o)
                hbox.pack_start(entry, True, True)
                vbox.pack_start(hbox)

            SINKS[classname]["image"] = image
            SINKS[classname]["alpha"] = DEFAULT_ALPHA

            #setup DND
            frame.drag_dest_set(
                gtk.DEST_DEFAULT_MOTION | gtk.DEST_DEFAULT_HIGHLIGHT | gtk.DEST_DEFAULT_DROP,
                [ ( "text/uri-list", 0, 0 ) ], 
                gtk.gdk.ACTION_COPY
                )
            frame.connect("drag_data_received", self._on_drag_and_drop, classname)

        config = gtk.Button("Upload")
        config.connect("clicked", self._on_upload_clicked)
        self.vbox.pack_start(config)

        self.progress = gtk.ProgressBar()
        self.progress.set_orientation(gtk.PROGRESS_LEFT_TO_RIGHT)
        self.progress.set_text("Connecting...")
        self.vbox.pack_start(self.progress, False, False)

        self.window.add(self.vbox)
        self.vbox.set_sensitive(False)
        self.window.show_all()

        gobject.timeout_add(500, self.connect_to_conduit)

        if len(sys.argv) > 2:
        	self.add_files(sys.argv[2:])

    def _on_configure_clicked(self, sender):
        info = UploadDetails(self.window).run()

    def _on_upload_clicked(self, sender):
        if len(self.files) > 0:
            self.vbox.set_sensitive(False)
            ######
            # Now ask conduit to upload the photos to Flickr
            ######
            self.conduitApp.Sync(self.conduit)

    def _on_window_closed(self, widget, event, data=None):
        gtk.main_quit()
        return False

    def _on_entry_changed(self, entry, sink, key):
        if len(entry.get_text()) > 0:
            #if DEBUG:
            #    xml = """<configuration><slow type="bool">True</slow></configuration>"""
            #else:
            #    xml = CONFIG % entry.get_text()
            #self.conduitApp.SetDataProviderConfiguration(self.sink, xml)
            print "CONFIG ", sink, key

    def _on_drag_and_drop(self, wid, context, x, y, selection, targetType, time, classname):
        print classname
        self.add_files(
                [urllib.unquote(urlparse.urlsplit(name)[2])
                    for name in selection.get_uris()
                        if os.path.isfile(urllib.unquote(urlparse.urlsplit(name)[2]))],classname)

    # ----------------------------------------------------------------------
    # Sets up the connection to conduit
    def connect_to_conduit(self):
        bus = dbus.SessionBus()
        conduit_object = bus.get_object('org.gnome.Conduit', '/')
        self.conduitApp = dbus.Interface(conduit_object, 'org.gnome.Conduit')

        try:
            ######
            # Build the export interface
            ######
            for classname in SINKS:
                conduit, source, sink = self.conduitApp.BuildOneWaySync("FileSource",classname)
                SINKS[classname]["conduit"] = conduit
                SINKS[classname]["source"] = source
                SINKS[classname]["sink"] = sink
                
                #get an icon for the GUI
                key = self.conduitApp.GetDataProviderKey(sink)
                icon_path = self.conduitApp.GetDataProviderInformation(key)["icon_path"]
                SINKS[classname]["icon"] = gtk.gdk.pixbuf_new_from_file(icon_path)
                SINKS[classname]["image"].set_from_pixbuf(SINKS[classname]["icon"])

            self.conduitApp.connect_to_signal("SyncCompleted", self.sync_complete_cb)
            self.conduitApp.connect_to_signal("SyncProgress", self.sync_progress_cb)

            self.progress.set_text("Drop pictures here")
            self.vbox.set_sensitive(True)

        except dbus.DBusException, err:
            self.progress.set_text("Could not Connect")
            print err

    def sync_complete_cb(self, conduit, error):
        self.progress.set_fraction(1.0)
        if error == True:
            self.progress.set_text("Error")
        else:
            self.progress.set_text("Drop pictures here")

        self.files = []
        self.vbox.set_sensitive(True)

    def sync_progress_cb(self, conduit, progress):
        self.progress.set_fraction(progress)

    def add_files(self, files, classname):
        sink = SINKS[classname]

        for filename in files:
            #check if its an image file
            try:
                pixbuf = gtk.gdk.pixbuf_new_from_file(filename)

                self.progress.set_text("%s" % (filename.split("/")[-1],))

                # resize to fit in frame
                if pixbuf.get_height() < pixbuf.get_width():
                    width = 150
                    height = int(150.0 / pixbuf.get_width() * pixbuf.get_height())
                else:
                    height = 150
                    width = int(150.0 / pixbuf.get_height() * pixbuf.get_width())
                pixbuf = pixbuf.scale_simple(width, height, gtk.gdk.INTERP_TILES)

                pixbuf = self.white_background(pixbuf)

                # fade
                gobject.timeout_add(50, self.do_fade, sink, sink["image"].get_pixbuf().copy(), pixbuf)

            except gobject.GError:
                pass

            while gtk.events_pending():
                gtk.main_iteration(False)
                time.sleep(0.05)

            if filename not in self.files:
                self.files.append(filename)

            ###
            # Add the file to conduit
            ###
            #self.conduitApp.AddDataToSource(self.source, filename)

        gobject.timeout_add(50, self.do_fade, sink, sink["image"].get_pixbuf().copy(), sink["icon"])
        self.progress.set_text("%s Photos to Upload" % len(self.files))

    def white_background(self, image):
        x = (WIDTH - image.get_width()) / 2
        y = (HEIGHT - image.get_height()) / 2
        composed = self.white.copy()
        image.composite(composed, x, y,
                    min(WIDTH, image.get_width()),
                    min(HEIGHT, image.get_height()),
                    x, y, 1, 1, gtk.gdk.INTERP_TILES, 255)
        return composed

    def do_fade(self, sink, pixbuf, new_pixbuf):
        new_pixbuf.composite(pixbuf,
                0, 0, pixbuf.get_width(), pixbuf.get_height(),
                0, 0, 1, 1,
                gtk.gdk.INTERP_TILES, sink["alpha"])

        sink["image"].set_from_pixbuf(pixbuf)
        sink["alpha"] += 25
        if sink["alpha"] < 255:
            return True
        else:
            sink["alpha"] = 25
            sink["image"].set_from_pixbuf(new_pixbuf)
            return False

if __name__ == "__main__":
    hello = Yaput()
    gtk.main()

