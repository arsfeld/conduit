--- conduit/modules/FlickrModule/flickrapi/__init__.py	2008-02-08 21:47:20.000000000 +0100
+++ conduit/modules/FlickrModule/flickrapi/__init__.py	2008-02-08 21:48:05.000000000 +0100
@@ -8,7 +8,7 @@
 .. _`the FlickrAPI homepage`: http://flickrapi.sf.net/
 '''
 
-__version__ = '0.16-beta0'
+__version__ = '0.16-beta0-CONDUIT'
 __revision__ = '$Revision: 114 $'
 __all__ = ('FlickrAPI', 'IllegalArgumentException', 'FlickrError',
         'XMLNode', 'set_log_level', '__version__', '__revision__')
@@ -50,9 +50,7 @@
 from flickrapi.multipart import Part, Multipart, FilePart
 from flickrapi import reportinghttp
 
-logging.basicConfig()
 LOG = logging.getLogger(__name__)
-LOG.setLevel(logging.INFO)
 
 ########################################################################
 # Exceptions
@@ -113,12 +111,12 @@
     flickrReplaceForm = "/services/replace/"
 
     #-------------------------------------------------------------------
-    def __init__(self, apiKey, secret=None, fail_on_error=True):
+    def __init__(self, apiKey, secret=None, fail_on_error=True, username=""):
         """Construct a new FlickrAPI instance for a given API key and secret."""
         
         self.api_key = apiKey
         self.secret = secret
-        self.token_cache = TokenCache(apiKey)
+        self.token_cache = TokenCache(apiKey, username)
         self.token = self.token_cache.token
         self.fail_on_error = fail_on_error
         
--- conduit/modules/FlickrModule/flickrapi/reportinghttp.py	2008-02-08 21:46:21.000000000 +0100
+++ conduit/modules/FlickrModule/flickrapi/reportinghttp.py	2008-02-08 21:48:19.000000000 +0100
@@ -9,7 +9,6 @@
 
 __all__ = ['urlopen']
 
-logging.basicConfig()
 LOG = logging.getLogger(__name__)
 
 progress_callback = None
--- conduit/modules/FlickrModule/flickrapi/tokencache.py	2008-02-08 21:47:20.000000000 +0100
+++ conduit/modules/FlickrModule/flickrapi/tokencache.py	2008-02-08 21:46:37.000000000 +0100
@@ -13,10 +13,14 @@
     The application is identified by the API key used.
     '''
     
-    def __init__(self, api_key):
+    def __init__(self, api_key, username=""):
         '''Creates a new token cache instance'''
         
         self.api_key = api_key
+        if username != "":
+            self.auth_filename = "%s-auth.xml" % username
+        else:
+            self.auth_filename = "auth.xml"
         
     def __getCachedTokenPath(self):
         """Return the directory holding the app data."""
@@ -24,7 +28,7 @@
 
     def __getCachedTokenFilename(self):
         """Return the full pathname of the cached token file."""
-        return os.path.join(self.__getCachedTokenPath(), "auth.xml")
+        return os.path.join(self.__getCachedTokenPath(), self.auth_filename)
 
     def __getCachedToken(self):
         """Read and return a cached token, or None if not found.
@@ -67,4 +71,4 @@
         
         os.unlink(self.__getCachedTokenFilename())
         
-    token = property(__getCachedToken, __setCachedToken, forget, "The cached token")
\ No newline at end of file
+    token = property(__getCachedToken, __setCachedToken, forget, "The cached token")
