/* -*- Mode: C; c-basic-offset: 4 -*- */
%%
headers
#include <Python.h>

#define NO_IMPORT_PYGOBJECT
#include "pygobject.h"

#include <evolution.h>

static PyObject *
hits_as_python_object (GList *hits)
{
	PyObject *result;
	int i;

	if ((result = PyList_New (g_list_length (hits))) == NULL)
		return NULL;

	i = 0;
	for (; hits != NULL; hits = hits->next) {
		Hit *hit = (Hit *) hits->data;
		PyObject *t = PyTuple_New (4);
		if (hit->text == NULL) {
			Py_INCREF (Py_None);
			PyTuple_SET_ITEM (t, 0, Py_None);
		} else {
			PyTuple_SET_ITEM (t, 0, PyString_FromString(hit->text));
		}
		
		if (hit->email == NULL) {
			Py_INCREF (Py_None);
			PyTuple_SET_ITEM (t, 1, Py_None);
		} else {
			PyTuple_SET_ITEM (t, 1, PyString_FromString(hit->email));
		}

		if (hit->uid == NULL) {
			Py_INCREF (Py_None);
			PyTuple_SET_ITEM (t, 2, Py_None);
		} else {
			PyTuple_SET_ITEM (t, 2, PyString_FromString(hit->uid));
		}

		if (hit->pixbuf == NULL) {
			Py_INCREF (Py_None);
			PyTuple_SET_ITEM (t, 3, Py_None);
		} else {
			PyTuple_SET_ITEM (t, 3, pygobject_new ((GObject*) hit->pixbuf));
		}

		PyList_SET_ITEM (result, i, t);
		i++;
	}
	return result;
}

%%
modulename _evolution
%%
%%
ignore-glob
	init
	free_*
	*_get_type
%%
%%
override search_sync kwargs 
static PyObject*
_wrap_search_sync (PyGObject *self, PyObject *args, PyObject *kwargs) 
{
	char *query;
	int max_results;
	GList *hits;
	PyObject *hits_apo;

	if (!PyArg_ParseTuple (args, "si:search_sync", &query, &max_results)) {
		return NULL;
	}

	hits = search_sync (query, max_results);
	hits_apo = hits_as_python_object (hits);
	g_list_foreach (hits, (GFunc) free_hit, NULL);
	g_list_free (hits);

	return hits_apo;
}
